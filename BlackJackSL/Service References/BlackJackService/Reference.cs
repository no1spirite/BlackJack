//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace BlackJackSL.BlackJackService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuplexMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.ConnectMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.GameDisconnectMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.SplitMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.SplitMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DealMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DealMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.HitMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.HitMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DoubleMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DoubleMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.ClearPlayersMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.JoinGameMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.ClearPlayersMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.JoinGameMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.AddPlayerMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.RemovePlayerMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.FinishedDealingMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.FinishedDealingMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.ClearDealerMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.LeaveGameMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.LeaveGameMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.StandMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.StandMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.PlayerAlreadyExistsMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.AddPlayerMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.RemovePlayerMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.BetMessageToServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.BetMessageFromServer))]
    public partial class DuplexMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    public partial class ConnectMessage : BlackJackSL.BlackJackService.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameDisconnectMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    public partial class GameDisconnectMessage : BlackJackSL.BlackJackService.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplitMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.SplitMessageFromServer))]
    public partial class SplitMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private int handIdField;
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int handId {
            get {
                return this.handIdField;
            }
            set {
                if ((this.handIdField.Equals(value) != true)) {
                    this.handIdField = value;
                    this.RaisePropertyChanged("handId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplitMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class SplitMessageFromServer : BlackJackSL.BlackJackService.SplitMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DealMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DealMessageFromServer))]
    public partial class DealMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DealMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class DealMessageFromServer : BlackJackSL.BlackJackService.DealMessageToServer {
        
        private System.Collections.ObjectModel.ObservableCollection<BlackJackSL.BlackJackService.CardViewModel> deckField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BlackJackSL.BlackJackService.CardViewModel> deck {
            get {
                return this.deckField;
            }
            set {
                if ((object.ReferenceEquals(this.deckField, value) != true)) {
                    this.deckField = value;
                    this.RaisePropertyChanged("deck");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HitMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.HitMessageFromServer))]
    public partial class HitMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private int handIdField;
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int handId {
            get {
                return this.handIdField;
            }
            set {
                if ((this.handIdField.Equals(value) != true)) {
                    this.handIdField = value;
                    this.RaisePropertyChanged("handId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HitMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class HitMessageFromServer : BlackJackSL.BlackJackService.HitMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoubleMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.DoubleMessageFromServer))]
    public partial class DoubleMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private int handIdField;
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int handId {
            get {
                return this.handIdField;
            }
            set {
                if ((this.handIdField.Equals(value) != true)) {
                    this.handIdField = value;
                    this.RaisePropertyChanged("handId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoubleMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class DoubleMessageFromServer : BlackJackSL.BlackJackService.DoubleMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClearPlayersMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class ClearPlayersMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JoinGameMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.ClearPlayersMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.JoinGameMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.AddPlayerMessageFromServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.RemovePlayerMessageFromServer))]
    public partial class JoinGameMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClearPlayersMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class ClearPlayersMessageFromServer : BlackJackSL.BlackJackService.JoinGameMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JoinGameMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class JoinGameMessageFromServer : BlackJackSL.BlackJackService.JoinGameMessageToServer {
        
        private string xmlDocField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlDoc {
            get {
                return this.xmlDocField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlDocField, value) != true)) {
                    this.xmlDocField = value;
                    this.RaisePropertyChanged("xmlDoc");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddPlayerMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class AddPlayerMessageFromServer : BlackJackSL.BlackJackService.JoinGameMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemovePlayerMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class RemovePlayerMessageFromServer : BlackJackSL.BlackJackService.JoinGameMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FinishedDealingMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.FinishedDealingMessageFromServer))]
    public partial class FinishedDealingMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FinishedDealingMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class FinishedDealingMessageFromServer : BlackJackSL.BlackJackService.FinishedDealingMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClearDealerMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class ClearDealerMessageFromServer : BlackJackSL.BlackJackService.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeaveGameMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.LeaveGameMessageFromServer))]
    public partial class LeaveGameMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeaveGameMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class LeaveGameMessageFromServer : BlackJackSL.BlackJackService.LeaveGameMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StandMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.StandMessageFromServer))]
    public partial class StandMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StandMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class StandMessageFromServer : BlackJackSL.BlackJackService.StandMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerAlreadyExistsMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class PlayerAlreadyExistsMessageFromServer : BlackJackSL.BlackJackService.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddPlayerMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class AddPlayerMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemovePlayerMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class RemovePlayerMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetMessageToServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BlackJackSL.BlackJackService.BetMessageFromServer))]
    public partial class BetMessageToServer : BlackJackSL.BlackJackService.DuplexMessage {
        
        private double betAmountField;
        
        private string nicknameField;
        
        private int playerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double betAmount {
            get {
                return this.betAmountField;
            }
            set {
                if ((this.betAmountField.Equals(value) != true)) {
                    this.betAmountField = value;
                    this.RaisePropertyChanged("betAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetMessageFromServer", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack")]
    public partial class BetMessageFromServer : BlackJackSL.BlackJackService.BetMessageToServer {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardViewModel", Namespace="http://schemas.datacontract.org/2004/07/BlackJack.Services.BlackJack.Objects")]
    public partial class CardViewModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CardBackImageField;
        
        private bool CardDealtField;
        
        private string CardImageField;
        
        private int CardOpacityField;
        
        private int CardRotationYField;
        
        private int CardValueField;
        
        private int CardXPosField;
        
        private int CardYPosField;
        
        private int CardZPosField;
        
        private string CurrentImageField;
        
        private int IsVisibleField;
        
        private string RankField;
        
        private string SuitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardBackImage {
            get {
                return this.CardBackImageField;
            }
            set {
                if ((object.ReferenceEquals(this.CardBackImageField, value) != true)) {
                    this.CardBackImageField = value;
                    this.RaisePropertyChanged("CardBackImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CardDealt {
            get {
                return this.CardDealtField;
            }
            set {
                if ((this.CardDealtField.Equals(value) != true)) {
                    this.CardDealtField = value;
                    this.RaisePropertyChanged("CardDealt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardImage {
            get {
                return this.CardImageField;
            }
            set {
                if ((object.ReferenceEquals(this.CardImageField, value) != true)) {
                    this.CardImageField = value;
                    this.RaisePropertyChanged("CardImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardOpacity {
            get {
                return this.CardOpacityField;
            }
            set {
                if ((this.CardOpacityField.Equals(value) != true)) {
                    this.CardOpacityField = value;
                    this.RaisePropertyChanged("CardOpacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardRotationY {
            get {
                return this.CardRotationYField;
            }
            set {
                if ((this.CardRotationYField.Equals(value) != true)) {
                    this.CardRotationYField = value;
                    this.RaisePropertyChanged("CardRotationY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardValue {
            get {
                return this.CardValueField;
            }
            set {
                if ((this.CardValueField.Equals(value) != true)) {
                    this.CardValueField = value;
                    this.RaisePropertyChanged("CardValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardXPos {
            get {
                return this.CardXPosField;
            }
            set {
                if ((this.CardXPosField.Equals(value) != true)) {
                    this.CardXPosField = value;
                    this.RaisePropertyChanged("CardXPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardYPos {
            get {
                return this.CardYPosField;
            }
            set {
                if ((this.CardYPosField.Equals(value) != true)) {
                    this.CardYPosField = value;
                    this.RaisePropertyChanged("CardYPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardZPos {
            get {
                return this.CardZPosField;
            }
            set {
                if ((this.CardZPosField.Equals(value) != true)) {
                    this.CardZPosField = value;
                    this.RaisePropertyChanged("CardZPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentImage {
            get {
                return this.CurrentImageField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentImageField, value) != true)) {
                    this.CurrentImageField = value;
                    this.RaisePropertyChanged("CurrentImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsVisible {
            get {
                return this.IsVisibleField;
            }
            set {
                if ((this.IsVisibleField.Equals(value) != true)) {
                    this.IsVisibleField = value;
                    this.RaisePropertyChanged("IsVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rank {
            get {
                return this.RankField;
            }
            set {
                if ((object.ReferenceEquals(this.RankField, value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suit {
            get {
                return this.SuitField;
            }
            set {
                if ((object.ReferenceEquals(this.SuitField, value) != true)) {
                    this.SuitField = value;
                    this.RaisePropertyChanged("Suit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BlackJackService.DuplexService", CallbackContract=typeof(BlackJackSL.BlackJackService.DuplexServiceCallback))]
    public interface DuplexService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/DuplexService/SendToService")]
        System.IAsyncResult BeginSendToService(BlackJackSL.BlackJackService.DuplexMessage msg, System.AsyncCallback callback, object asyncState);
        
        void EndSendToService(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DuplexServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/DuplexService/SendToClient")]
        void SendToClient(BlackJackSL.BlackJackService.DuplexMessage msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DuplexServiceChannel : BlackJackSL.BlackJackService.DuplexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexServiceClient : System.ServiceModel.DuplexClientBase<BlackJackSL.BlackJackService.DuplexService>, BlackJackSL.BlackJackService.DuplexService {
        
        private BeginOperationDelegate onBeginSendToServiceDelegate;
        
        private EndOperationDelegate onEndSendToServiceDelegate;
        
        private System.Threading.SendOrPostCallback onSendToServiceCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new DuplexServiceClientCallback(), binding, remoteAddress) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendToServiceCompleted;
        
        public event System.EventHandler<SendToClientReceivedEventArgs> SendToClientReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BlackJackSL.BlackJackService.DuplexService.BeginSendToService(BlackJackSL.BlackJackService.DuplexMessage msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendToService(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void BlackJackSL.BlackJackService.DuplexService.EndSendToService(System.IAsyncResult result) {
            base.Channel.EndSendToService(result);
        }
        
        private System.IAsyncResult OnBeginSendToService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BlackJackSL.BlackJackService.DuplexMessage msg = ((BlackJackSL.BlackJackService.DuplexMessage)(inValues[0]));
            return ((BlackJackSL.BlackJackService.DuplexService)(this)).BeginSendToService(msg, callback, asyncState);
        }
        
        private object[] OnEndSendToService(System.IAsyncResult result) {
            ((BlackJackSL.BlackJackService.DuplexService)(this)).EndSendToService(result);
            return null;
        }
        
        private void OnSendToServiceCompleted(object state) {
            if ((this.SendToServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendToServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendToServiceAsync(BlackJackSL.BlackJackService.DuplexMessage msg) {
            this.SendToServiceAsync(msg, null);
        }
        
        public void SendToServiceAsync(BlackJackSL.BlackJackService.DuplexMessage msg, object userState) {
            if ((this.onBeginSendToServiceDelegate == null)) {
                this.onBeginSendToServiceDelegate = new BeginOperationDelegate(this.OnBeginSendToService);
            }
            if ((this.onEndSendToServiceDelegate == null)) {
                this.onEndSendToServiceDelegate = new EndOperationDelegate(this.OnEndSendToService);
            }
            if ((this.onSendToServiceCompletedDelegate == null)) {
                this.onSendToServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendToServiceCompleted);
            }
            base.InvokeAsync(this.onBeginSendToServiceDelegate, new object[] {
                        msg}, this.onEndSendToServiceDelegate, this.onSendToServiceCompletedDelegate, userState);
        }
        
        private void OnSendToClientReceived(object state) {
            if ((this.SendToClientReceived != null)) {
                object[] results = ((object[])(state));
                this.SendToClientReceived(this, new SendToClientReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.SendToClientReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BlackJackSL.BlackJackService.DuplexService CreateChannel() {
            return new DuplexServiceClientChannel(this);
        }
        
        private class DuplexServiceClientCallback : object, DuplexServiceCallback {
            
            private DuplexServiceClient proxy;
            
            public void Initialize(DuplexServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void SendToClient(BlackJackSL.BlackJackService.DuplexMessage msg) {
                this.proxy.OnSendToClientReceived(new object[] {
                            msg});
            }
        }
        
        private class DuplexServiceClientChannel : ChannelBase<BlackJackSL.BlackJackService.DuplexService>, BlackJackSL.BlackJackService.DuplexService {
            
            public DuplexServiceClientChannel(System.ServiceModel.DuplexClientBase<BlackJackSL.BlackJackService.DuplexService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendToService(BlackJackSL.BlackJackService.DuplexMessage msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = msg;
                System.IAsyncResult _result = base.BeginInvoke("SendToService", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendToService(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendToService", _args, result);
            }
        }
    }
    
    public class SendToClientReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendToClientReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BlackJackSL.BlackJackService.DuplexMessage msg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BlackJackSL.BlackJackService.DuplexMessage)(this.results[0]));
            }
        }
    }
}
